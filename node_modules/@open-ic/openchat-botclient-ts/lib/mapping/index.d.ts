import { type BlobReference, type AuthToken, type SendMessageResponse, type AccessGate, type AccessGateConfig, type GroupPermissions, type MessagePermissions, type PermissionRole, type CreateChannelResponse, type DeleteChannelResponse, DecodedApiKey, type RawApiKey, type ApiKeyActionScope, type MergedActionScope, type ChatIdentifier, type RawCommandJwt, type CommandActionScope, type RawApiKeyJwt, DecodedJwt, type ChatDetailsResponse, type ChatEventWrapper, type ChatEvent, type MessageEvent, type MessageContent, type CompletedCryptocurrencyTransfer, type FailedCryptocurrencyTransfer, type ThreadSummary, type TipsReceived, type BotMessageContext, type CommandArg, type ChatEventsResponse, type ChatEventsCriteria } from "../domain";
import { type AuthToken as ApiAuthToken, type BlobReference as ApiBlobReference, type AccessGate as ApiAccessGate, type AccessGateNonComposite as ApiAccessGateNonComposite, type AccessGateConfig as ApiAccessGateConfig, type MessagePermissions as ApiMessagePermissions, type GroupRole as ApiGroupRole, type GroupPermissionRole as ApiPermissionRole, type GroupPermissions as ApiGroupPermissions, type LocalUserIndexBotDeleteChannelResponse as BotDeleteChannelResponse, type LocalUserIndexBotSendMessageResponse as BotSendMessageResponse, type LocalUserIndexBotCreateChannelResponse as BotCreateChannelResponse, type Chat, type LocalUserIndexBotChatDetailsResponse as BotChatDetailsResponse, type LocalUserIndexBotChatEventsResponse as BotChatEventsResponse, type ChatEvent as ApiChatEvent, type Message as ApiMessage, type MessageContent as ApiMessageContent, type Cryptocurrency as ApiCryptocurrency, type FailedCryptoTransaction as ApiFailedCryptoTransaction, type CompletedCryptoTransaction as ApiCompletedCryptoTransaction, type ThreadSummary as ApiThreadSummary, type BotMessageContext as ApiBotMessageContext, BotCommandArg, type EventWrapperChatEvent as ApiEventWrapperChatEvent, type LocalUserIndexChatEventsEventsSelectionCriteria as ApiChatEventsCriteria } from "../typebox/typebox";
type ApiPrincipal = Uint8Array | number[] | string;
export declare function mapApiKeyJwt(jwtStr: string, json: RawApiKeyJwt): DecodedJwt;
export declare function mapCommandJwt(jwtStr: string, json: RawCommandJwt): DecodedJwt;
export declare function mapApiKey(apiKey: string, json: RawApiKey): DecodedApiKey;
export declare function mapCommandScope(api: CommandActionScope): MergedActionScope;
export declare function mapApiKeyScope(api: ApiKeyActionScope): MergedActionScope;
export declare function mapChatIdentifier(api: Chat): ChatIdentifier;
export declare function sendMessageResponse(api: BotSendMessageResponse): SendMessageResponse;
export declare function createChannelResponse(api: BotCreateChannelResponse): CreateChannelResponse;
export declare function deleteChannelResponse(api: BotDeleteChannelResponse): DeleteChannelResponse;
export declare function chatDetailsResponse(api: BotChatDetailsResponse): ChatDetailsResponse;
export declare function chatEventsResponse(api: BotChatEventsResponse): ChatEventsResponse;
export declare function accessGate(api: ApiAccessGate): AccessGate;
export declare function credentialArguments(value: [string, {
    String: string;
} | {
    Int: number;
}][]): Record<string, string | number>;
export declare function apiAuthToken(auth: AuthToken): ApiAuthToken;
export declare function apiBlobReference(domain: BlobReference): ApiBlobReference;
export declare function apiAccessGateConfig(domain: AccessGateConfig): ApiAccessGateConfig;
export declare function apiAccessGate(domain: AccessGate): ApiAccessGate;
export declare function apiLeafAccessGate(domain: AccessGate): ApiAccessGateNonComposite;
export declare function permissionRole(api: ApiPermissionRole | ApiGroupRole): PermissionRole;
export declare function apiPermissionRole(domain: PermissionRole): ApiPermissionRole;
export declare function apiMessagePermissions(domain: MessagePermissions): ApiMessagePermissions;
export declare function apiGroupPermissions(domain: GroupPermissions): ApiGroupPermissions;
export declare function apiOptional<A, B>(domain: A | undefined, mapper: (a: A) => B): B | undefined;
export declare function optional<A, B>(api: A | null | undefined, mapper: (a: A) => B): B | undefined;
export declare function identity<A>(a: A): A;
export declare function principalStringToBytes(principal: string): Uint8Array;
export declare function consolidateBytes(bytes: Uint8Array | number[]): Uint8Array;
export declare function principalBytesToString(value: Uint8Array | number[] | string): string;
export declare function toRecord2<T, K extends string | number | symbol, V>(xs: T[], keyFn: (x: T) => K, valFn: (x: T) => V): Record<K, V>;
export declare function eventWrapper(value: ApiEventWrapperChatEvent): ChatEventWrapper;
export declare function event(value: ApiChatEvent): ChatEvent;
export declare function message(value: ApiMessage): MessageEvent;
export declare function messageContent(value: ApiMessageContent, sender: string): MessageContent;
export declare function completedCryptoTransfer(value: ApiCompletedCryptoTransaction, sender: string, recipient: string): CompletedCryptocurrencyTransfer;
export declare function failedCryptoTransfer(value: ApiFailedCryptoTransaction, recipient: string): FailedCryptocurrencyTransfer;
export declare function token(value: ApiCryptocurrency): string;
export declare function bytesToBigint(bytes: Uint8Array | number[]): bigint;
export declare function bytesToHexString(bytes: Uint8Array | number[]): string;
export declare function threadSummary(value: ApiThreadSummary): ThreadSummary;
export declare function tips(value: [ApiPrincipal, [ApiPrincipal, bigint][]][]): TipsReceived;
export declare function botMessageContext(value: ApiBotMessageContext): BotMessageContext;
export declare function botCommandArg(api: BotCommandArg): CommandArg;
export declare function apiChatEventsCriteria(domain: ChatEventsCriteria): ApiChatEventsCriteria;
export {};
