import { HttpAgent } from "@dfinity/agent";
import { BotCommandArg, BotCommand } from "../typebox/typebox";
import { FileMessage, ImageMessage, PollMessage, TextMessage, type AuthToken, type BotClientConfig, type Message, type SendMessageResponse, type CreateChannelResponse, type DeleteChannelResponse, type MergedActionScope, type MergedActionChatScope, type MergedActionCommunityScope, type ChatIdentifier, type ChatDetailsResponse, type ChatEventsCriteria, type ChatEventsResponse } from "../domain";
import type { Channel } from "../domain/channel";
export declare class BotClient {
    #private;
    constructor(agent: HttpAgent, env: BotClientConfig, auth: AuthToken);
    decodeApiKeyScope(apiKey: string): MergedActionScope;
    get command(): BotCommand | undefined;
    sendMessage(message: Message): Promise<SendMessageResponse>;
    createChannel(channel: Channel): Promise<CreateChannelResponse>;
    deleteChannel(channelId: bigint): Promise<DeleteChannelResponse>;
    get scope(): MergedActionScope;
    get chatScope(): MergedActionChatScope | undefined;
    get communityScope(): MergedActionCommunityScope | undefined;
    get messageId(): bigint | undefined;
    stringArg(name: string): string | undefined;
    booleanArg(name: string): boolean | undefined;
    decimalArg(name: string): number | undefined;
    integerArg(name: string): bigint | undefined;
    userArg(name: string): string | undefined;
    get threadRootMessageId(): number | undefined | null;
    get chatId(): ChatIdentifier | undefined;
    get botId(): string;
    get commandTimezone(): string | undefined;
    get commandLanguage(): string | undefined;
    get commandArgs(): BotCommandArg[];
    get commandName(): string | undefined;
    get initiator(): string | undefined;
    createTextMessage(text: string): Promise<TextMessage>;
    createPollMessage(question: string, answers: string[]): Promise<PollMessage>;
    createImageMessage(imageData: Uint8Array, mimeType: string, width: number, height: number): Promise<ImageMessage>;
    createFileMessage(name: string, data: Uint8Array, mimeType: string, fileSize: number): Promise<FileMessage>;
    chatDetails(channelId?: bigint): Promise<ChatDetailsResponse>;
    chatEvents(criteria: ChatEventsCriteria, channelId?: bigint): Promise<ChatEventsResponse>;
}
