import type { BotCommand, BotPermissions, Chat } from "../typebox/typebox";
import type { ChatPermission, CommunityPermission, MessagePermission } from "./permissions";
import type { MergedActionScope } from "./scope";
declare class DecodedAuth {
    #private;
    protected granted_permissions: BotPermissions;
    constructor(granted_permissions: BotPermissions);
    hasMessagePermission(perm: MessagePermission): boolean;
    hasChatPermission(perm: ChatPermission): boolean;
    hasCommunityPermission(perm: CommunityPermission): boolean;
}
export declare class DecodedJwt extends DecodedAuth {
    encoded: string;
    bot_api_gateway: string;
    bot: string;
    scope: MergedActionScope;
    command?: BotCommand | undefined;
    kind: string;
    constructor(encoded: string, bot_api_gateway: string, bot: string, scope: MergedActionScope, granted_permissions: BotPermissions, command?: BotCommand | undefined);
}
export declare class DecodedApiKey extends DecodedAuth {
    encoded: string;
    bot_api_gateway: string;
    bot: string;
    scope: MergedActionScope;
    kind: string;
    constructor(encoded: string, bot_api_gateway: string, bot: string, scope: MergedActionScope, granted_permissions: BotPermissions);
}
export type RawCommandJwt = {
    exp: number;
    claim_type: string;
    bot_api_gateway: string;
    bot: string;
    scope: CommandActionScope;
    granted_permissions: BotPermissions;
    command?: BotCommand;
};
export type RawApiKeyJwt = {
    exp: number;
    claim_type: string;
    bot_api_gateway: string;
    bot: string;
    scope: ApiKeyActionScope;
    granted_permissions: BotPermissions;
};
export type RawApiKey = {
    gateway: string;
    bot_id: string;
    scope: ApiKeyActionScope;
    secret: string;
    permissions: BotPermissions;
};
export type DecodedPayload = DecodedApiKey | DecodedJwt;
export type ApiKeyActionScope = ApiKeyActionChatScope | ApiKeyActionCommunityScope;
export type ApiKeyActionChatScope = {
    Chat: Chat;
};
export type ApiKeyActionCommunityScope = CommandActionCommunityScope;
export type CommandActionChatScope = {
    Chat: {
        chat: Chat;
        thread?: number;
        message_id?: bigint;
    };
};
export type CommandActionScope = CommandActionChatScope | CommandActionCommunityScope;
export type CommandActionCommunityScope = {
    Community: string;
};
export type BotCommandUserValue = {
    User: Uint8Array;
};
export type BotClientConfig = {
    openStorageCanisterId: string;
    icHost: string;
    identityPrivateKey: string;
    openchatPublicKey: string;
};
export type AuthToken = CommandJwtAuthToken | ApiKeyJwtAuthToken | ApiKey;
export type CommandJwtAuthToken = {
    kind: "command_jwt";
    token: string;
};
export type ApiKeyJwtAuthToken = {
    kind: "api_jwt";
    token: string;
};
export type ApiKey = {
    kind: "api_key";
    token: string;
};
export type CommandArg = CommandArgCommon & CommandArgType;
export type CommandArgCommon = {
    name: string;
};
export type CommandArgType = UserArg | BooleanArg | StringArg | IntegerArg | DecimalArg | DateTimeArg;
export type UserArg = {
    kind: "user";
    userId?: string;
};
export type BooleanArg = {
    kind: "boolean";
    value?: boolean;
};
export type StringArg = {
    kind: "string";
    value?: string;
};
export type IntegerArg = {
    kind: "integer";
    value: bigint | null;
};
export type DecimalArg = {
    kind: "decimal";
    value: number | null;
};
export type DateTimeArg = {
    kind: "dateTime";
    value?: bigint | null;
};
export {};
